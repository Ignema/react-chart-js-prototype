{"version":3,"sources":["components/BarChart/BarChart.js","components/LineChart/LineChart.js","App.js","reportWebVitals.js","index.js"],"names":["data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","BarChart","width","height","fill","borderDash","title","display","text","LineChart","id","maintainAspectRatio","plugins","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAGMA,EAAO,CACLC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAClCC,SAAU,CAAC,CACPC,MAAO,WACPH,KAAM,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,IAC5BI,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,KAInBC,EAAU,CACRC,OAAQ,CACJC,EAAG,CACCC,aAAa,KAiBdC,EAXE,WACb,OACQ,cAAC,MAAD,CACIX,KAAMA,EACNY,MAAO,IACPC,OAAQ,GACRN,QAASA,KCxCnBP,G,OAAO,CACLC,OAAQ,CAAC,UAAW,QAAS,SAAU,YACvCC,SAAU,CAAC,CACPC,MAAO,OACPH,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBc,MAAM,EACNT,YAAa,SAEjB,CACIF,MAAO,OACPH,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBc,MAAM,EACNT,YAAa,SACbC,YAAa,GAEjB,CACIH,MAAO,OACPH,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBc,MAAM,EACNT,YAAa,OACbU,WAAY,CAAC,OAuBnBC,EAAQ,CACNC,SAAS,EACTC,KAAM,iBAiBCC,EAbG,WACd,OACQ,cAAC,OAAD,CACIC,GAAG,YACHpB,KAAMA,EACNY,MAAO,IACPC,OAAQ,GACRN,QAAS,CAAEc,qBAAqB,GAChCC,QAAS,CAACN,MC3CXO,MAbf,WAEE,OACE,gCACE,+CACA,yCACA,cAAC,EAAD,IACA,yCACA,cAAC,EAAD,QCASC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.75948c27.chunk.js","sourcesContent":["import { Bar } from 'react-chartjs-2'\r\nimport './BarChart.css'\r\n\r\nconst data = {\r\n        labels: ['A', 'B', 'C', 'D', 'E', 'F'],\r\n        datasets: [{\r\n            label: 'Material',\r\n            data: [100, 50, 50, 30, 15, 15],\r\n            backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(153, 102, 255, 0.2)',\r\n                'rgba(255, 159, 64, 0.2)'\r\n            ],\r\n            borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)'\r\n            ],\r\n            borderWidth: 1\r\n        }]\r\n    }\r\n\r\nconst options = {\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true\r\n            }\r\n        }\r\n    }\r\n\r\n\r\nconst BarChart = () => {\r\n    return (\r\n            <Bar \r\n                data={data}\r\n                width={100}\r\n                height={50}\r\n                options={options}\r\n            />\r\n    )\r\n}\r\n\r\nexport default BarChart\r\n","import { Line } from 'react-chartjs-2'\r\nimport './LineChart.css'\r\n\r\nconst data = {\r\n        labels: [\"January\", \"April\", \"August\", \"December\"],\r\n        datasets: [{\r\n            label: \"2019\",\r\n            data: [8, 4, 4, 1],\r\n            fill: true,\r\n            borderColor: \"green\"\r\n        },\r\n        {\r\n            label: \"2020\",\r\n            data: [6, 2, 1, 1],\r\n            fill: true,\r\n            borderColor: \"violet\",\r\n            borderWidth: 6\r\n        },\r\n        {\r\n            label: \"2021\",\r\n            data: [9, 4, 5, 1],\r\n            fill: true,\r\n            borderColor: \"blue\",\r\n            borderDash: [4]\r\n        },\r\n    ]\r\n}\r\n\r\n// const options = {\r\n//     animations: {\r\n//       tension: {\r\n//         duration: 1000,\r\n//         easing: 'easeInQuad',\r\n//         from: 1,\r\n//         to: .5,\r\n//         loop: true\r\n//       }\r\n//     },\r\n//     scales: {\r\n//       y: { // defining min and max so hiding the dataset does not change scale range\r\n//         min: 0,\r\n//         max: 100\r\n//       }\r\n//     }\r\n// }\r\n\r\nconst title = {\r\n        display: true,\r\n        text: 'Random Values'\r\n}\r\n\r\n\r\nconst LineChart = () => {\r\n    return (\r\n            <Line \r\n                id=\"linechart\"\r\n                data={data}\r\n                width={100}\r\n                height={50}\r\n                options={{ maintainAspectRatio: true }}\r\n                plugins={[title]}\r\n            />\r\n    )\r\n}\r\n\r\nexport default LineChart\r\n","import './App.css';\nimport BarChart from './components/BarChart/BarChart.js'\nimport LineChart from './components/LineChart/LineChart.js'\n\nfunction App() {\n\n  return (\n    <div>\n      <h1>Chart Catalog</h1>\n      <h2>Chart 1</h2>\n      <BarChart />\n      <h2>Chart 2</h2>\n      <LineChart />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}